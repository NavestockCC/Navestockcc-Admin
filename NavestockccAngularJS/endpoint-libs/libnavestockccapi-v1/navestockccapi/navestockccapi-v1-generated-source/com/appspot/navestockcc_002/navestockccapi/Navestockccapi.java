/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://code.google.com/p/google-apis-client-generator/
 * (build: 2015-08-03 17:34:38 UTC)
 * on 2015-08-26 at 19:15:37 UTC 
 * Modify at your own risk.
 */

package com.appspot.navestockcc_002.navestockccapi;

/**
 * Service definition for Navestockccapi (v1).
 *
 * <p>
 * An API to manage Navestock Cricket Club
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link NavestockccapiRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class Navestockccapi extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.18.0-rc of the navestockccapi library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://navestockcc-002.appspot.com/_ah/api/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "navestockccapi/v1/";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public Navestockccapi(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  Navestockccapi(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Club collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Navestockccapi navestockccapi = new Navestockccapi(...);}
   *   {@code Navestockccapi.Club.List request = navestockccapi.club().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Club club() {
    return new Club();
  }

  /**
   * The "club" collection of methods.
   */
  public class Club {

    /**
     * Create a request for the method "club.all".
     *
     * This request holds the parameters needed by the navestockccapi server.  After setting any
     * optional parameters, call the {@link All#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public All all() throws java.io.IOException {
      All result = new All();
      initialize(result);
      return result;
    }

    public class All extends NavestockccapiRequest<com.appspot.navestockcc_002.navestockccapi.model.ClubCollection> {

      private static final String REST_PATH = "ClubAll";

      /**
       * Create a request for the method "club.all".
       *
       * This request holds the parameters needed by the the navestockccapi server.  After setting any
       * optional parameters, call the {@link All#execute()} method to invoke the remote operation. <p>
       * {@link All#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected All() {
        super(Navestockccapi.this, "GET", REST_PATH, null, com.appspot.navestockcc_002.navestockccapi.model.ClubCollection.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public All setAlt(java.lang.String alt) {
        return (All) super.setAlt(alt);
      }

      @Override
      public All setFields(java.lang.String fields) {
        return (All) super.setFields(fields);
      }

      @Override
      public All setKey(java.lang.String key) {
        return (All) super.setKey(key);
      }

      @Override
      public All setOauthToken(java.lang.String oauthToken) {
        return (All) super.setOauthToken(oauthToken);
      }

      @Override
      public All setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (All) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public All setQuotaUser(java.lang.String quotaUser) {
        return (All) super.setQuotaUser(quotaUser);
      }

      @Override
      public All setUserIp(java.lang.String userIp) {
        return (All) super.setUserIp(userIp);
      }

      @Override
      public All set(String parameterName, Object value) {
        return (All) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "club.allTeams".
     *
     * This request holds the parameters needed by the navestockccapi server.  After setting any
     * optional parameters, call the {@link AllTeams#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public AllTeams allTeams() throws java.io.IOException {
      AllTeams result = new AllTeams();
      initialize(result);
      return result;
    }

    public class AllTeams extends NavestockccapiRequest<com.appspot.navestockcc_002.navestockccapi.model.TeamCollection> {

      private static final String REST_PATH = "TeamAll";

      /**
       * Create a request for the method "club.allTeams".
       *
       * This request holds the parameters needed by the the navestockccapi server.  After setting any
       * optional parameters, call the {@link AllTeams#execute()} method to invoke the remote operation.
       * <p> {@link
       * AllTeams#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected AllTeams() {
        super(Navestockccapi.this, "GET", REST_PATH, null, com.appspot.navestockcc_002.navestockccapi.model.TeamCollection.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public AllTeams setAlt(java.lang.String alt) {
        return (AllTeams) super.setAlt(alt);
      }

      @Override
      public AllTeams setFields(java.lang.String fields) {
        return (AllTeams) super.setFields(fields);
      }

      @Override
      public AllTeams setKey(java.lang.String key) {
        return (AllTeams) super.setKey(key);
      }

      @Override
      public AllTeams setOauthToken(java.lang.String oauthToken) {
        return (AllTeams) super.setOauthToken(oauthToken);
      }

      @Override
      public AllTeams setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (AllTeams) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public AllTeams setQuotaUser(java.lang.String quotaUser) {
        return (AllTeams) super.setQuotaUser(quotaUser);
      }

      @Override
      public AllTeams setUserIp(java.lang.String userIp) {
        return (AllTeams) super.setUserIp(userIp);
      }

      @Override
      public AllTeams set(String parameterName, Object value) {
        return (AllTeams) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "club.getclub".
     *
     * This request holds the parameters needed by the navestockccapi server.  After setting any
     * optional parameters, call the {@link Getclub#execute()} method to invoke the remote operation.
     *
     * @param clubId
     * @return the request
     */
    public Getclub getclub(java.lang.Integer clubId) throws java.io.IOException {
      Getclub result = new Getclub(clubId);
      initialize(result);
      return result;
    }

    public class Getclub extends NavestockccapiRequest<com.appspot.navestockcc_002.navestockccapi.model.Club> {

      private static final String REST_PATH = "club/{clubId}";

      /**
       * Create a request for the method "club.getclub".
       *
       * This request holds the parameters needed by the the navestockccapi server.  After setting any
       * optional parameters, call the {@link Getclub#execute()} method to invoke the remote operation.
       * <p> {@link
       * Getclub#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param clubId
       * @since 1.13
       */
      protected Getclub(java.lang.Integer clubId) {
        super(Navestockccapi.this, "GET", REST_PATH, null, com.appspot.navestockcc_002.navestockccapi.model.Club.class);
        this.clubId = com.google.api.client.util.Preconditions.checkNotNull(clubId, "Required parameter clubId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Getclub setAlt(java.lang.String alt) {
        return (Getclub) super.setAlt(alt);
      }

      @Override
      public Getclub setFields(java.lang.String fields) {
        return (Getclub) super.setFields(fields);
      }

      @Override
      public Getclub setKey(java.lang.String key) {
        return (Getclub) super.setKey(key);
      }

      @Override
      public Getclub setOauthToken(java.lang.String oauthToken) {
        return (Getclub) super.setOauthToken(oauthToken);
      }

      @Override
      public Getclub setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Getclub) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Getclub setQuotaUser(java.lang.String quotaUser) {
        return (Getclub) super.setQuotaUser(quotaUser);
      }

      @Override
      public Getclub setUserIp(java.lang.String userIp) {
        return (Getclub) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Integer clubId;

      /**

       */
      public java.lang.Integer getClubId() {
        return clubId;
      }

      public Getclub setClubId(java.lang.Integer clubId) {
        this.clubId = clubId;
        return this;
      }

      @Override
      public Getclub set(String parameterName, Object value) {
        return (Getclub) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "club.teamsPerClub".
     *
     * This request holds the parameters needed by the navestockccapi server.  After setting any
     * optional parameters, call the {@link TeamsPerClub#execute()} method to invoke the remote
     * operation.
     *
     * @param clubId
     * @return the request
     */
    public TeamsPerClub teamsPerClub(java.lang.Integer clubId) throws java.io.IOException {
      TeamsPerClub result = new TeamsPerClub(clubId);
      initialize(result);
      return result;
    }

    public class TeamsPerClub extends NavestockccapiRequest<com.appspot.navestockcc_002.navestockccapi.model.TeamCollection> {

      private static final String REST_PATH = "TeamPerClub/{clubId}";

      /**
       * Create a request for the method "club.teamsPerClub".
       *
       * This request holds the parameters needed by the the navestockccapi server.  After setting any
       * optional parameters, call the {@link TeamsPerClub#execute()} method to invoke the remote
       * operation. <p> {@link
       * TeamsPerClub#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param clubId
       * @since 1.13
       */
      protected TeamsPerClub(java.lang.Integer clubId) {
        super(Navestockccapi.this, "GET", REST_PATH, null, com.appspot.navestockcc_002.navestockccapi.model.TeamCollection.class);
        this.clubId = com.google.api.client.util.Preconditions.checkNotNull(clubId, "Required parameter clubId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public TeamsPerClub setAlt(java.lang.String alt) {
        return (TeamsPerClub) super.setAlt(alt);
      }

      @Override
      public TeamsPerClub setFields(java.lang.String fields) {
        return (TeamsPerClub) super.setFields(fields);
      }

      @Override
      public TeamsPerClub setKey(java.lang.String key) {
        return (TeamsPerClub) super.setKey(key);
      }

      @Override
      public TeamsPerClub setOauthToken(java.lang.String oauthToken) {
        return (TeamsPerClub) super.setOauthToken(oauthToken);
      }

      @Override
      public TeamsPerClub setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (TeamsPerClub) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public TeamsPerClub setQuotaUser(java.lang.String quotaUser) {
        return (TeamsPerClub) super.setQuotaUser(quotaUser);
      }

      @Override
      public TeamsPerClub setUserIp(java.lang.String userIp) {
        return (TeamsPerClub) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Integer clubId;

      /**

       */
      public java.lang.Integer getClubId() {
        return clubId;
      }

      public TeamsPerClub setClubId(java.lang.Integer clubId) {
        this.clubId = clubId;
        return this;
      }

      @Override
      public TeamsPerClub set(String parameterName, Object value) {
        return (TeamsPerClub) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Match collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Navestockccapi navestockccapi = new Navestockccapi(...);}
   *   {@code Navestockccapi.Match.List request = navestockccapi.match().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Match match() {
    return new Match();
  }

  /**
   * The "match" collection of methods.
   */
  public class Match {

    /**
     * Create a request for the method "match.all".
     *
     * This request holds the parameters needed by the navestockccapi server.  After setting any
     * optional parameters, call the {@link All#execute()} method to invoke the remote operation.
     *
     * @param teamId
     * @param matchYear
     * @return the request
     */
    public All all(java.lang.Integer teamId, java.lang.String matchYear) throws java.io.IOException {
      All result = new All(teamId, matchYear);
      initialize(result);
      return result;
    }

    public class All extends NavestockccapiRequest<com.appspot.navestockcc_002.navestockccapi.model.FixtureCollection> {

      private static final String REST_PATH = "FixtureServicesAll/{teamId}/{matchYear}";

      /**
       * Create a request for the method "match.all".
       *
       * This request holds the parameters needed by the the navestockccapi server.  After setting any
       * optional parameters, call the {@link All#execute()} method to invoke the remote operation. <p>
       * {@link All#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param teamId
       * @param matchYear
       * @since 1.13
       */
      protected All(java.lang.Integer teamId, java.lang.String matchYear) {
        super(Navestockccapi.this, "GET", REST_PATH, null, com.appspot.navestockcc_002.navestockccapi.model.FixtureCollection.class);
        this.teamId = com.google.api.client.util.Preconditions.checkNotNull(teamId, "Required parameter teamId must be specified.");
        this.matchYear = com.google.api.client.util.Preconditions.checkNotNull(matchYear, "Required parameter matchYear must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public All setAlt(java.lang.String alt) {
        return (All) super.setAlt(alt);
      }

      @Override
      public All setFields(java.lang.String fields) {
        return (All) super.setFields(fields);
      }

      @Override
      public All setKey(java.lang.String key) {
        return (All) super.setKey(key);
      }

      @Override
      public All setOauthToken(java.lang.String oauthToken) {
        return (All) super.setOauthToken(oauthToken);
      }

      @Override
      public All setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (All) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public All setQuotaUser(java.lang.String quotaUser) {
        return (All) super.setQuotaUser(quotaUser);
      }

      @Override
      public All setUserIp(java.lang.String userIp) {
        return (All) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Integer teamId;

      /**

       */
      public java.lang.Integer getTeamId() {
        return teamId;
      }

      public All setTeamId(java.lang.Integer teamId) {
        this.teamId = teamId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String matchYear;

      /**

       */
      public java.lang.String getMatchYear() {
        return matchYear;
      }

      public All setMatchYear(java.lang.String matchYear) {
        this.matchYear = matchYear;
        return this;
      }

      @Override
      public All set(String parameterName, Object value) {
        return (All) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "match.get".
     *
     * This request holds the parameters needed by the navestockccapi server.  After setting any
     * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param matchid
     * @return the request
     */
    public Get get(java.lang.Integer matchid) throws java.io.IOException {
      Get result = new Get(matchid);
      initialize(result);
      return result;
    }

    public class Get extends NavestockccapiRequest<com.appspot.navestockcc_002.navestockccapi.model.Fixture> {

      private static final String REST_PATH = "FixtureServicesFixture/{matchid}";

      /**
       * Create a request for the method "match.get".
       *
       * This request holds the parameters needed by the the navestockccapi server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
       * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param matchid
       * @since 1.13
       */
      protected Get(java.lang.Integer matchid) {
        super(Navestockccapi.this, "GET", REST_PATH, null, com.appspot.navestockcc_002.navestockccapi.model.Fixture.class);
        this.matchid = com.google.api.client.util.Preconditions.checkNotNull(matchid, "Required parameter matchid must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Integer matchid;

      /**

       */
      public java.lang.Integer getMatchid() {
        return matchid;
      }

      public Get setMatchid(java.lang.Integer matchid) {
        this.matchid = matchid;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "match.insertPlayerInScorecard".
     *
     * This request holds the parameters needed by the navestockccapi server.  After setting any
     * optional parameters, call the {@link InsertPlayerInScorecard#execute()} method to invoke the
     * remote operation.
     *
     * @param idMtch
     * @param idPlyr
     * @param idTm
     * @return the request
     */
    public InsertPlayerInScorecard insertPlayerInScorecard(java.lang.Integer idMtch, java.lang.Integer idPlyr, java.lang.Integer idTm) throws java.io.IOException {
      InsertPlayerInScorecard result = new InsertPlayerInScorecard(idMtch, idPlyr, idTm);
      initialize(result);
      return result;
    }

    public class InsertPlayerInScorecard extends NavestockccapiRequest<Void> {

      private static final String REST_PATH = "addPlayerToScorecard/{idMtch}/{idPlyr}/{idTm}";

      /**
       * Create a request for the method "match.insertPlayerInScorecard".
       *
       * This request holds the parameters needed by the the navestockccapi server.  After setting any
       * optional parameters, call the {@link InsertPlayerInScorecard#execute()} method to invoke the
       * remote operation. <p> {@link InsertPlayerInScorecard#initialize(com.google.api.client.googleapi
       * s.services.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
       * after invoking the constructor. </p>
       *
       * @param idMtch
       * @param idPlyr
       * @param idTm
       * @since 1.13
       */
      protected InsertPlayerInScorecard(java.lang.Integer idMtch, java.lang.Integer idPlyr, java.lang.Integer idTm) {
        super(Navestockccapi.this, "POST", REST_PATH, null, Void.class);
        this.idMtch = com.google.api.client.util.Preconditions.checkNotNull(idMtch, "Required parameter idMtch must be specified.");
        this.idPlyr = com.google.api.client.util.Preconditions.checkNotNull(idPlyr, "Required parameter idPlyr must be specified.");
        this.idTm = com.google.api.client.util.Preconditions.checkNotNull(idTm, "Required parameter idTm must be specified.");
      }

      @Override
      public InsertPlayerInScorecard setAlt(java.lang.String alt) {
        return (InsertPlayerInScorecard) super.setAlt(alt);
      }

      @Override
      public InsertPlayerInScorecard setFields(java.lang.String fields) {
        return (InsertPlayerInScorecard) super.setFields(fields);
      }

      @Override
      public InsertPlayerInScorecard setKey(java.lang.String key) {
        return (InsertPlayerInScorecard) super.setKey(key);
      }

      @Override
      public InsertPlayerInScorecard setOauthToken(java.lang.String oauthToken) {
        return (InsertPlayerInScorecard) super.setOauthToken(oauthToken);
      }

      @Override
      public InsertPlayerInScorecard setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (InsertPlayerInScorecard) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public InsertPlayerInScorecard setQuotaUser(java.lang.String quotaUser) {
        return (InsertPlayerInScorecard) super.setQuotaUser(quotaUser);
      }

      @Override
      public InsertPlayerInScorecard setUserIp(java.lang.String userIp) {
        return (InsertPlayerInScorecard) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Integer idMtch;

      /**

       */
      public java.lang.Integer getIdMtch() {
        return idMtch;
      }

      public InsertPlayerInScorecard setIdMtch(java.lang.Integer idMtch) {
        this.idMtch = idMtch;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Integer idPlyr;

      /**

       */
      public java.lang.Integer getIdPlyr() {
        return idPlyr;
      }

      public InsertPlayerInScorecard setIdPlyr(java.lang.Integer idPlyr) {
        this.idPlyr = idPlyr;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Integer idTm;

      /**

       */
      public java.lang.Integer getIdTm() {
        return idTm;
      }

      public InsertPlayerInScorecard setIdTm(java.lang.Integer idTm) {
        this.idTm = idTm;
        return this;
      }

      @Override
      public InsertPlayerInScorecard set(String parameterName, Object value) {
        return (InsertPlayerInScorecard) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "match.removePlayerFromScorecard".
     *
     * This request holds the parameters needed by the navestockccapi server.  After setting any
     * optional parameters, call the {@link RemovePlayerFromScorecard#execute()} method to invoke the
     * remote operation.
     *
     * @param idMtch
     * @param idPlyr
     * @return the request
     */
    public RemovePlayerFromScorecard removePlayerFromScorecard(java.lang.Integer idMtch, java.lang.Integer idPlyr) throws java.io.IOException {
      RemovePlayerFromScorecard result = new RemovePlayerFromScorecard(idMtch, idPlyr);
      initialize(result);
      return result;
    }

    public class RemovePlayerFromScorecard extends NavestockccapiRequest<Void> {

      private static final String REST_PATH = "playerfromscorecard/{idMtch}/{idPlyr}";

      /**
       * Create a request for the method "match.removePlayerFromScorecard".
       *
       * This request holds the parameters needed by the the navestockccapi server.  After setting any
       * optional parameters, call the {@link RemovePlayerFromScorecard#execute()} method to invoke the
       * remote operation. <p> {@link RemovePlayerFromScorecard#initialize(com.google.api.client.googlea
       * pis.services.AbstractGoogleClientRequest)} must be called to initialize this instance
       * immediately after invoking the constructor. </p>
       *
       * @param idMtch
       * @param idPlyr
       * @since 1.13
       */
      protected RemovePlayerFromScorecard(java.lang.Integer idMtch, java.lang.Integer idPlyr) {
        super(Navestockccapi.this, "DELETE", REST_PATH, null, Void.class);
        this.idMtch = com.google.api.client.util.Preconditions.checkNotNull(idMtch, "Required parameter idMtch must be specified.");
        this.idPlyr = com.google.api.client.util.Preconditions.checkNotNull(idPlyr, "Required parameter idPlyr must be specified.");
      }

      @Override
      public RemovePlayerFromScorecard setAlt(java.lang.String alt) {
        return (RemovePlayerFromScorecard) super.setAlt(alt);
      }

      @Override
      public RemovePlayerFromScorecard setFields(java.lang.String fields) {
        return (RemovePlayerFromScorecard) super.setFields(fields);
      }

      @Override
      public RemovePlayerFromScorecard setKey(java.lang.String key) {
        return (RemovePlayerFromScorecard) super.setKey(key);
      }

      @Override
      public RemovePlayerFromScorecard setOauthToken(java.lang.String oauthToken) {
        return (RemovePlayerFromScorecard) super.setOauthToken(oauthToken);
      }

      @Override
      public RemovePlayerFromScorecard setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (RemovePlayerFromScorecard) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public RemovePlayerFromScorecard setQuotaUser(java.lang.String quotaUser) {
        return (RemovePlayerFromScorecard) super.setQuotaUser(quotaUser);
      }

      @Override
      public RemovePlayerFromScorecard setUserIp(java.lang.String userIp) {
        return (RemovePlayerFromScorecard) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Integer idMtch;

      /**

       */
      public java.lang.Integer getIdMtch() {
        return idMtch;
      }

      public RemovePlayerFromScorecard setIdMtch(java.lang.Integer idMtch) {
        this.idMtch = idMtch;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Integer idPlyr;

      /**

       */
      public java.lang.Integer getIdPlyr() {
        return idPlyr;
      }

      public RemovePlayerFromScorecard setIdPlyr(java.lang.Integer idPlyr) {
        this.idPlyr = idPlyr;
        return this;
      }

      @Override
      public RemovePlayerFromScorecard set(String parameterName, Object value) {
        return (RemovePlayerFromScorecard) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "match.scorecard".
     *
     * This request holds the parameters needed by the navestockccapi server.  After setting any
     * optional parameters, call the {@link Scorecard#execute()} method to invoke the remote operation.
     *
     * @param matchid
     * @return the request
     */
    public Scorecard scorecard(java.lang.Integer matchid) throws java.io.IOException {
      Scorecard result = new Scorecard(matchid);
      initialize(result);
      return result;
    }

    public class Scorecard extends NavestockccapiRequest<com.appspot.navestockcc_002.navestockccapi.model.ScoreCardCollection> {

      private static final String REST_PATH = "scorecardcollection/{matchid}";

      /**
       * Create a request for the method "match.scorecard".
       *
       * This request holds the parameters needed by the the navestockccapi server.  After setting any
       * optional parameters, call the {@link Scorecard#execute()} method to invoke the remote
       * operation. <p> {@link
       * Scorecard#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param matchid
       * @since 1.13
       */
      protected Scorecard(java.lang.Integer matchid) {
        super(Navestockccapi.this, "GET", REST_PATH, null, com.appspot.navestockcc_002.navestockccapi.model.ScoreCardCollection.class);
        this.matchid = com.google.api.client.util.Preconditions.checkNotNull(matchid, "Required parameter matchid must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Scorecard setAlt(java.lang.String alt) {
        return (Scorecard) super.setAlt(alt);
      }

      @Override
      public Scorecard setFields(java.lang.String fields) {
        return (Scorecard) super.setFields(fields);
      }

      @Override
      public Scorecard setKey(java.lang.String key) {
        return (Scorecard) super.setKey(key);
      }

      @Override
      public Scorecard setOauthToken(java.lang.String oauthToken) {
        return (Scorecard) super.setOauthToken(oauthToken);
      }

      @Override
      public Scorecard setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Scorecard) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Scorecard setQuotaUser(java.lang.String quotaUser) {
        return (Scorecard) super.setQuotaUser(quotaUser);
      }

      @Override
      public Scorecard setUserIp(java.lang.String userIp) {
        return (Scorecard) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Integer matchid;

      /**

       */
      public java.lang.Integer getMatchid() {
        return matchid;
      }

      public Scorecard setMatchid(java.lang.Integer matchid) {
        this.matchid = matchid;
        return this;
      }

      @Override
      public Scorecard set(String parameterName, Object value) {
        return (Scorecard) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "match.updatePlayerScoreCard".
     *
     * This request holds the parameters needed by the navestockccapi server.  After setting any
     * optional parameters, call the {@link UpdatePlayerScoreCard#execute()} method to invoke the remote
     * operation.
     *
     * @param content the {@link com.appspot.navestockcc_002.navestockccapi.model.ScoreCard}
     * @return the request
     */
    public UpdatePlayerScoreCard updatePlayerScoreCard(com.appspot.navestockcc_002.navestockccapi.model.ScoreCard content) throws java.io.IOException {
      UpdatePlayerScoreCard result = new UpdatePlayerScoreCard(content);
      initialize(result);
      return result;
    }

    public class UpdatePlayerScoreCard extends NavestockccapiRequest<Void> {

      private static final String REST_PATH = "void";

      /**
       * Create a request for the method "match.updatePlayerScoreCard".
       *
       * This request holds the parameters needed by the the navestockccapi server.  After setting any
       * optional parameters, call the {@link UpdatePlayerScoreCard#execute()} method to invoke the
       * remote operation. <p> {@link UpdatePlayerScoreCard#initialize(com.google.api.client.googleapis.
       * services.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
       * after invoking the constructor. </p>
       *
       * @param content the {@link com.appspot.navestockcc_002.navestockccapi.model.ScoreCard}
       * @since 1.13
       */
      protected UpdatePlayerScoreCard(com.appspot.navestockcc_002.navestockccapi.model.ScoreCard content) {
        super(Navestockccapi.this, "PUT", REST_PATH, content, Void.class);
      }

      @Override
      public UpdatePlayerScoreCard setAlt(java.lang.String alt) {
        return (UpdatePlayerScoreCard) super.setAlt(alt);
      }

      @Override
      public UpdatePlayerScoreCard setFields(java.lang.String fields) {
        return (UpdatePlayerScoreCard) super.setFields(fields);
      }

      @Override
      public UpdatePlayerScoreCard setKey(java.lang.String key) {
        return (UpdatePlayerScoreCard) super.setKey(key);
      }

      @Override
      public UpdatePlayerScoreCard setOauthToken(java.lang.String oauthToken) {
        return (UpdatePlayerScoreCard) super.setOauthToken(oauthToken);
      }

      @Override
      public UpdatePlayerScoreCard setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (UpdatePlayerScoreCard) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public UpdatePlayerScoreCard setQuotaUser(java.lang.String quotaUser) {
        return (UpdatePlayerScoreCard) super.setQuotaUser(quotaUser);
      }

      @Override
      public UpdatePlayerScoreCard setUserIp(java.lang.String userIp) {
        return (UpdatePlayerScoreCard) super.setUserIp(userIp);
      }

      @Override
      public UpdatePlayerScoreCard set(String parameterName, Object value) {
        return (UpdatePlayerScoreCard) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "match.updateresult".
     *
     * This request holds the parameters needed by the navestockccapi server.  After setting any
     * optional parameters, call the {@link Updateresult#execute()} method to invoke the remote
     * operation.
     *
     * @param content the {@link com.appspot.navestockcc_002.navestockccapi.model.Fixture}
     * @return the request
     */
    public Updateresult updateresult(com.appspot.navestockcc_002.navestockccapi.model.Fixture content) throws java.io.IOException {
      Updateresult result = new Updateresult(content);
      initialize(result);
      return result;
    }

    public class Updateresult extends NavestockccapiRequest<com.appspot.navestockcc_002.navestockccapi.model.Fixture> {

      private static final String REST_PATH = "fixture";

      /**
       * Create a request for the method "match.updateresult".
       *
       * This request holds the parameters needed by the the navestockccapi server.  After setting any
       * optional parameters, call the {@link Updateresult#execute()} method to invoke the remote
       * operation. <p> {@link
       * Updateresult#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.appspot.navestockcc_002.navestockccapi.model.Fixture}
       * @since 1.13
       */
      protected Updateresult(com.appspot.navestockcc_002.navestockccapi.model.Fixture content) {
        super(Navestockccapi.this, "PUT", REST_PATH, content, com.appspot.navestockcc_002.navestockccapi.model.Fixture.class);
      }

      @Override
      public Updateresult setAlt(java.lang.String alt) {
        return (Updateresult) super.setAlt(alt);
      }

      @Override
      public Updateresult setFields(java.lang.String fields) {
        return (Updateresult) super.setFields(fields);
      }

      @Override
      public Updateresult setKey(java.lang.String key) {
        return (Updateresult) super.setKey(key);
      }

      @Override
      public Updateresult setOauthToken(java.lang.String oauthToken) {
        return (Updateresult) super.setOauthToken(oauthToken);
      }

      @Override
      public Updateresult setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Updateresult) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Updateresult setQuotaUser(java.lang.String quotaUser) {
        return (Updateresult) super.setQuotaUser(quotaUser);
      }

      @Override
      public Updateresult setUserIp(java.lang.String userIp) {
        return (Updateresult) super.setUserIp(userIp);
      }

      @Override
      public Updateresult set(String parameterName, Object value) {
        return (Updateresult) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the MatchReport collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Navestockccapi navestockccapi = new Navestockccapi(...);}
   *   {@code Navestockccapi.MatchReport.List request = navestockccapi.matchReport().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public MatchReport matchReport() {
    return new MatchReport();
  }

  /**
   * The "matchReport" collection of methods.
   */
  public class MatchReport {

    /**
     * Create a request for the method "matchReport.add".
     *
     * This request holds the parameters needed by the navestockccapi server.  After setting any
     * optional parameters, call the {@link Add#execute()} method to invoke the remote operation.
     *
     * @param matchReport
     * @param idMatch
     * @return the request
     */
    public Add add(java.lang.String matchReport, java.lang.Integer idMatch) throws java.io.IOException {
      Add result = new Add(matchReport, idMatch);
      initialize(result);
      return result;
    }

    public class Add extends NavestockccapiRequest<Void> {

      private static final String REST_PATH = "addMatchReport/{matchReport}/{idMatch}";

      /**
       * Create a request for the method "matchReport.add".
       *
       * This request holds the parameters needed by the the navestockccapi server.  After setting any
       * optional parameters, call the {@link Add#execute()} method to invoke the remote operation. <p>
       * {@link Add#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param matchReport
       * @param idMatch
       * @since 1.13
       */
      protected Add(java.lang.String matchReport, java.lang.Integer idMatch) {
        super(Navestockccapi.this, "POST", REST_PATH, null, Void.class);
        this.matchReport = com.google.api.client.util.Preconditions.checkNotNull(matchReport, "Required parameter matchReport must be specified.");
        this.idMatch = com.google.api.client.util.Preconditions.checkNotNull(idMatch, "Required parameter idMatch must be specified.");
      }

      @Override
      public Add setAlt(java.lang.String alt) {
        return (Add) super.setAlt(alt);
      }

      @Override
      public Add setFields(java.lang.String fields) {
        return (Add) super.setFields(fields);
      }

      @Override
      public Add setKey(java.lang.String key) {
        return (Add) super.setKey(key);
      }

      @Override
      public Add setOauthToken(java.lang.String oauthToken) {
        return (Add) super.setOauthToken(oauthToken);
      }

      @Override
      public Add setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Add) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Add setQuotaUser(java.lang.String quotaUser) {
        return (Add) super.setQuotaUser(quotaUser);
      }

      @Override
      public Add setUserIp(java.lang.String userIp) {
        return (Add) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String matchReport;

      /**

       */
      public java.lang.String getMatchReport() {
        return matchReport;
      }

      public Add setMatchReport(java.lang.String matchReport) {
        this.matchReport = matchReport;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Integer idMatch;

      /**

       */
      public java.lang.Integer getIdMatch() {
        return idMatch;
      }

      public Add setIdMatch(java.lang.Integer idMatch) {
        this.idMatch = idMatch;
        return this;
      }

      @Override
      public Add set(String parameterName, Object value) {
        return (Add) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "matchReport.get".
     *
     * This request holds the parameters needed by the navestockccapi server.  After setting any
     * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param matchid
     * @return the request
     */
    public Get get(java.lang.Integer matchid) throws java.io.IOException {
      Get result = new Get(matchid);
      initialize(result);
      return result;
    }

    public class Get extends NavestockccapiRequest<com.appspot.navestockcc_002.navestockccapi.model.MatchReport> {

      private static final String REST_PATH = "matchreport/{matchid}";

      /**
       * Create a request for the method "matchReport.get".
       *
       * This request holds the parameters needed by the the navestockccapi server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
       * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param matchid
       * @since 1.13
       */
      protected Get(java.lang.Integer matchid) {
        super(Navestockccapi.this, "GET", REST_PATH, null, com.appspot.navestockcc_002.navestockccapi.model.MatchReport.class);
        this.matchid = com.google.api.client.util.Preconditions.checkNotNull(matchid, "Required parameter matchid must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Integer matchid;

      /**

       */
      public java.lang.Integer getMatchid() {
        return matchid;
      }

      public Get setMatchid(java.lang.Integer matchid) {
        this.matchid = matchid;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Player collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Navestockccapi navestockccapi = new Navestockccapi(...);}
   *   {@code Navestockccapi.Player.List request = navestockccapi.player().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Player player() {
    return new Player();
  }

  /**
   * The "player" collection of methods.
   */
  public class Player {

    /**
     * Create a request for the method "player.addPlayer".
     *
     * This request holds the parameters needed by the navestockccapi server.  After setting any
     * optional parameters, call the {@link AddPlayer#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.appspot.navestockcc_002.navestockccapi.model.Player}
     * @return the request
     */
    public AddPlayer addPlayer(com.appspot.navestockcc_002.navestockccapi.model.Player content) throws java.io.IOException {
      AddPlayer result = new AddPlayer(content);
      initialize(result);
      return result;
    }

    public class AddPlayer extends NavestockccapiRequest<Void> {

      private static final String REST_PATH = "addPlayer";

      /**
       * Create a request for the method "player.addPlayer".
       *
       * This request holds the parameters needed by the the navestockccapi server.  After setting any
       * optional parameters, call the {@link AddPlayer#execute()} method to invoke the remote
       * operation. <p> {@link
       * AddPlayer#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.appspot.navestockcc_002.navestockccapi.model.Player}
       * @since 1.13
       */
      protected AddPlayer(com.appspot.navestockcc_002.navestockccapi.model.Player content) {
        super(Navestockccapi.this, "POST", REST_PATH, content, Void.class);
      }

      @Override
      public AddPlayer setAlt(java.lang.String alt) {
        return (AddPlayer) super.setAlt(alt);
      }

      @Override
      public AddPlayer setFields(java.lang.String fields) {
        return (AddPlayer) super.setFields(fields);
      }

      @Override
      public AddPlayer setKey(java.lang.String key) {
        return (AddPlayer) super.setKey(key);
      }

      @Override
      public AddPlayer setOauthToken(java.lang.String oauthToken) {
        return (AddPlayer) super.setOauthToken(oauthToken);
      }

      @Override
      public AddPlayer setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (AddPlayer) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public AddPlayer setQuotaUser(java.lang.String quotaUser) {
        return (AddPlayer) super.setQuotaUser(quotaUser);
      }

      @Override
      public AddPlayer setUserIp(java.lang.String userIp) {
        return (AddPlayer) super.setUserIp(userIp);
      }

      @Override
      public AddPlayer set(String parameterName, Object value) {
        return (AddPlayer) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "player.playerlist".
     *
     * This request holds the parameters needed by the navestockccapi server.  After setting any
     * optional parameters, call the {@link Playerlist#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public Playerlist playerlist() throws java.io.IOException {
      Playerlist result = new Playerlist();
      initialize(result);
      return result;
    }

    public class Playerlist extends NavestockccapiRequest<com.appspot.navestockcc_002.navestockccapi.model.PlayerCollection> {

      private static final String REST_PATH = "playercollection";

      /**
       * Create a request for the method "player.playerlist".
       *
       * This request holds the parameters needed by the the navestockccapi server.  After setting any
       * optional parameters, call the {@link Playerlist#execute()} method to invoke the remote
       * operation. <p> {@link
       * Playerlist#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected Playerlist() {
        super(Navestockccapi.this, "GET", REST_PATH, null, com.appspot.navestockcc_002.navestockccapi.model.PlayerCollection.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Playerlist setAlt(java.lang.String alt) {
        return (Playerlist) super.setAlt(alt);
      }

      @Override
      public Playerlist setFields(java.lang.String fields) {
        return (Playerlist) super.setFields(fields);
      }

      @Override
      public Playerlist setKey(java.lang.String key) {
        return (Playerlist) super.setKey(key);
      }

      @Override
      public Playerlist setOauthToken(java.lang.String oauthToken) {
        return (Playerlist) super.setOauthToken(oauthToken);
      }

      @Override
      public Playerlist setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Playerlist) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Playerlist setQuotaUser(java.lang.String quotaUser) {
        return (Playerlist) super.setQuotaUser(quotaUser);
      }

      @Override
      public Playerlist setUserIp(java.lang.String userIp) {
        return (Playerlist) super.setUserIp(userIp);
      }

      @Override
      public Playerlist set(String parameterName, Object value) {
        return (Playerlist) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "player.removePlayer".
     *
     * This request holds the parameters needed by the navestockccapi server.  After setting any
     * optional parameters, call the {@link RemovePlayer#execute()} method to invoke the remote
     * operation.
     *
     * @param idPlyer
     * @return the request
     */
    public RemovePlayer removePlayer(java.lang.Integer idPlyer) throws java.io.IOException {
      RemovePlayer result = new RemovePlayer(idPlyer);
      initialize(result);
      return result;
    }

    public class RemovePlayer extends NavestockccapiRequest<Void> {

      private static final String REST_PATH = "player/{idPlyer}";

      /**
       * Create a request for the method "player.removePlayer".
       *
       * This request holds the parameters needed by the the navestockccapi server.  After setting any
       * optional parameters, call the {@link RemovePlayer#execute()} method to invoke the remote
       * operation. <p> {@link
       * RemovePlayer#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param idPlyer
       * @since 1.13
       */
      protected RemovePlayer(java.lang.Integer idPlyer) {
        super(Navestockccapi.this, "DELETE", REST_PATH, null, Void.class);
        this.idPlyer = com.google.api.client.util.Preconditions.checkNotNull(idPlyer, "Required parameter idPlyer must be specified.");
      }

      @Override
      public RemovePlayer setAlt(java.lang.String alt) {
        return (RemovePlayer) super.setAlt(alt);
      }

      @Override
      public RemovePlayer setFields(java.lang.String fields) {
        return (RemovePlayer) super.setFields(fields);
      }

      @Override
      public RemovePlayer setKey(java.lang.String key) {
        return (RemovePlayer) super.setKey(key);
      }

      @Override
      public RemovePlayer setOauthToken(java.lang.String oauthToken) {
        return (RemovePlayer) super.setOauthToken(oauthToken);
      }

      @Override
      public RemovePlayer setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (RemovePlayer) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public RemovePlayer setQuotaUser(java.lang.String quotaUser) {
        return (RemovePlayer) super.setQuotaUser(quotaUser);
      }

      @Override
      public RemovePlayer setUserIp(java.lang.String userIp) {
        return (RemovePlayer) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Integer idPlyer;

      /**

       */
      public java.lang.Integer getIdPlyer() {
        return idPlyer;
      }

      public RemovePlayer setIdPlyer(java.lang.Integer idPlyer) {
        this.idPlyer = idPlyer;
        return this;
      }

      @Override
      public RemovePlayer set(String parameterName, Object value) {
        return (RemovePlayer) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "player.updatePlayer".
     *
     * This request holds the parameters needed by the navestockccapi server.  After setting any
     * optional parameters, call the {@link UpdatePlayer#execute()} method to invoke the remote
     * operation.
     *
     * @param idPlyer
     * @param frstname
     * @param lstName
     * @param emailaddr
     * @return the request
     */
    public UpdatePlayer updatePlayer(java.lang.Integer idPlyer, java.lang.String frstname, java.lang.String lstName, java.lang.String emailaddr) throws java.io.IOException {
      UpdatePlayer result = new UpdatePlayer(idPlyer, frstname, lstName, emailaddr);
      initialize(result);
      return result;
    }

    public class UpdatePlayer extends NavestockccapiRequest<Void> {

      private static final String REST_PATH = "editPlayer/{idPlyer}/{Frstname}/{LstName}/{emailaddr}";

      /**
       * Create a request for the method "player.updatePlayer".
       *
       * This request holds the parameters needed by the the navestockccapi server.  After setting any
       * optional parameters, call the {@link UpdatePlayer#execute()} method to invoke the remote
       * operation. <p> {@link
       * UpdatePlayer#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param idPlyer
       * @param frstname
       * @param lstName
       * @param emailaddr
       * @since 1.13
       */
      protected UpdatePlayer(java.lang.Integer idPlyer, java.lang.String frstname, java.lang.String lstName, java.lang.String emailaddr) {
        super(Navestockccapi.this, "PUT", REST_PATH, null, Void.class);
        this.idPlyer = com.google.api.client.util.Preconditions.checkNotNull(idPlyer, "Required parameter idPlyer must be specified.");
        this.frstname = com.google.api.client.util.Preconditions.checkNotNull(frstname, "Required parameter frstname must be specified.");
        this.lstName = com.google.api.client.util.Preconditions.checkNotNull(lstName, "Required parameter lstName must be specified.");
        this.emailaddr = com.google.api.client.util.Preconditions.checkNotNull(emailaddr, "Required parameter emailaddr must be specified.");
      }

      @Override
      public UpdatePlayer setAlt(java.lang.String alt) {
        return (UpdatePlayer) super.setAlt(alt);
      }

      @Override
      public UpdatePlayer setFields(java.lang.String fields) {
        return (UpdatePlayer) super.setFields(fields);
      }

      @Override
      public UpdatePlayer setKey(java.lang.String key) {
        return (UpdatePlayer) super.setKey(key);
      }

      @Override
      public UpdatePlayer setOauthToken(java.lang.String oauthToken) {
        return (UpdatePlayer) super.setOauthToken(oauthToken);
      }

      @Override
      public UpdatePlayer setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (UpdatePlayer) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public UpdatePlayer setQuotaUser(java.lang.String quotaUser) {
        return (UpdatePlayer) super.setQuotaUser(quotaUser);
      }

      @Override
      public UpdatePlayer setUserIp(java.lang.String userIp) {
        return (UpdatePlayer) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Integer idPlyer;

      /**

       */
      public java.lang.Integer getIdPlyer() {
        return idPlyer;
      }

      public UpdatePlayer setIdPlyer(java.lang.Integer idPlyer) {
        this.idPlyer = idPlyer;
        return this;
      }

      @com.google.api.client.util.Key("Frstname")
      private java.lang.String frstname;

      /**

       */
      public java.lang.String getFrstname() {
        return frstname;
      }

      public UpdatePlayer setFrstname(java.lang.String frstname) {
        this.frstname = frstname;
        return this;
      }

      @com.google.api.client.util.Key("LstName")
      private java.lang.String lstName;

      /**

       */
      public java.lang.String getLstName() {
        return lstName;
      }

      public UpdatePlayer setLstName(java.lang.String lstName) {
        this.lstName = lstName;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String emailaddr;

      /**

       */
      public java.lang.String getEmailaddr() {
        return emailaddr;
      }

      public UpdatePlayer setEmailaddr(java.lang.String emailaddr) {
        this.emailaddr = emailaddr;
        return this;
      }

      @Override
      public UpdatePlayer set(String parameterName, Object value) {
        return (UpdatePlayer) super.set(parameterName, value);
      }
    }

  }

  /**
   * Builder for {@link Navestockccapi}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
    }

    /** Builds a new instance of {@link Navestockccapi}. */
    @Override
    public Navestockccapi build() {
      return new Navestockccapi(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link NavestockccapiRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setNavestockccapiRequestInitializer(
        NavestockccapiRequestInitializer navestockccapiRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(navestockccapiRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
